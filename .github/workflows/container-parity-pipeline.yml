name: 🚀 Shift-Left DevOps Pipeline - Container Parity

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual trigger

# Security: Restrict permissions
permissions:
  contents: read
  security-events: write
  actions: read
  checks: write
  pull-requests: write

env:
  # Environment variables for consistent configuration
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # ============================================================================
  # STAGE 1: BUILD CONTAINERS - Exact same as local development
  # ============================================================================
  
  build:
    name: 🏗️ Build Container Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build development container
        run: |
          echo "🏗️ Building development container..."
          docker build --target development -t playground:dev .

      - name: Build CI container  
        run: |
          echo "🏗️ Building CI container..."
          docker build --target ci -t playground:ci .

      - name: Verify container environments
        run: |
          echo "🔍 Verifying development environment..."
          docker run --rm playground:dev node --version
          docker run --rm playground:dev npm --version
          
          echo "🔍 Verifying CI environment..."
          docker run --rm playground:ci which markdownlint || echo "markdownlint not found"
          docker run --rm playground:ci which markdown-link-check || echo "markdown-link-check not found"

  # ============================================================================
  # STAGE 2: QUALITY CHECKS - Using exact same container as local dev
  # ============================================================================
  
  quality-checks:
    name: 🔍 Quality & Linting Checks
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build CI container
        run: docker build --target ci -t playground:ci .

      - name: Run markdown link checking  
        run: |
          echo "🔗 Checking markdown links in container..."
          docker run --rm -v ${{ github.workspace }}:/app:ro playground:ci \
            markdown-link-check src/*.md *.md --config .markdown-link-check.json

      - name: Validate project structure
        run: |
          echo "📋 Validating project structure..."
          docker run --rm -v ${{ github.workspace }}:/app:ro playground:ci \
            bash -c "ls -la src/ && echo '✅ Project structure validated'"

  # ============================================================================
  # STAGE 3: CONTAINER PARITY VALIDATION
  # ============================================================================
  
  parity-validation:
    name: 🎯 Container Parity Validation  
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run complete CI pipeline in container
        run: |
          echo "🐳 Running complete pipeline simulation..."
          docker build --target ci -t playground:ci .
          
          # This is the EXACT same command as 'make github-ci' locally
          docker run --rm -v ${{ github.workspace }}:/app:ro playground:ci bash -c "
            echo '🎯 GitHub Actions Container Pipeline - 100% Local Parity' &&
            echo '' &&
            echo '1️⃣ Building environment...' &&
            echo '   ✅ Container environment ready' &&
            echo '' &&
            echo '2️⃣ Checking markdown links...' &&
            markdown-link-check src/*.md *.md --config .markdown-link-check.json &&
            echo '   ✅ Link checking passed' &&
            echo '' &&
            echo '3️⃣ Validating project structure...' &&
            ls -la src/ &&
            echo '   ✅ Project structure validated' &&
            echo '' &&
            echo '🎉 All checks passed! Environment parity confirmed! 🚀'
          "

  # ============================================================================
  # STAGE 4: SECURITY SCAN
  # ============================================================================
  
  security-scan:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          output: 'trivy-results.txt'

      - name: Display security scan results
        if: always()
        run: |
          echo "🔒 Security Scan Results:"
          echo "========================="
          if [ -f trivy-results.txt ]; then
            cat trivy-results.txt
          else
            echo "✅ No security issues found"
          fi

      - name: Upload security scan results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: trivy-results.txt
          retention-days: 30

  # ============================================================================
  # STAGE 5: DEPLOYMENT READINESS CHECK
  # ============================================================================
  
  deployment-check:
    name: 🚀 Deployment Readiness
    runs-on: ubuntu-latest
    needs: [quality-checks, parity-validation, security-scan]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/feature/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check deployment conditions
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "🚀 Main branch detected - Running full deployment readiness check"
            DEPLOY_READY=true
          else
            echo "🔍 Feature branch detected - Running deployment validation only"
            DEPLOY_READY=false
          fi
          echo "DEPLOY_READY=$DEPLOY_READY" >> $GITHUB_ENV

      - name: Build production container
        run: |
          echo "🏗️ Building production container..."
          docker build --target production -t playground:prod .

      - name: Verify production readiness
        run: |
          echo "✅ All pipeline stages passed successfully!"
          echo "🎯 Environment parity confirmed between local and CI"
          echo "🔒 Security scans completed"
          echo "📝 Documentation validated"
          echo "🚀 Production container built successfully"
          
          if [[ "${{ env.DEPLOY_READY }}" == "true" ]]; then
            echo ""
            echo "🎯 READY FOR PRODUCTION DEPLOYMENT!"
            echo "All quality gates passed on main branch."
          else
            echo ""
            echo "🔍 Feature branch validation complete."
            echo "Merge to main branch to enable production deployment."
          fi
